#!/usr/bin/env python3
"""
Telegram Comment Monitor
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –¥–∏—Å–∫—É—Å—Å–∏–æ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö Telegram-–∫–∞–Ω–∞–ª–æ–≤
"""

import asyncio
import os
import sys
from datetime import datetime
from typing import Dict, Optional, Tuple
import logging

import aiohttp
import pytz
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from telethon.tl.functions.channels import GetFullChannelRequest, JoinChannelRequest
from telethon.tl.types import Channel
from telethon.errors import (
    ChannelPrivateError,
    InviteHashExpiredError,
    FloodWaitError,
    UserAlreadyParticipantError,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)


class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.api_id = self._get_env_int("TG_API_ID")
        self.api_hash = self._get_env("TG_API_HASH")
        self.string_session = self._get_env("TG_STRING_SESSION")
        self.bot_token = self._get_env("BOT_TOKEN")
        self.alert_chat_id = self._get_env_int("ALERT_CHAT_ID")
        self.channels = self._parse_channels(self._get_env("CHANNELS"))
        self.timezone = os.getenv("TZ", "UTC")
    
    @staticmethod
    def _get_env(key: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        value = os.getenv(key)
        if not value:
            logger.error(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {key} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            sys.exit(1)
        return value
    
    @staticmethod
    def _get_env_int(key: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        value = Config._get_env(key)
        try:
            return int(value)
        except ValueError:
            logger.error(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {key} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            sys.exit(1)
    
    @staticmethod
    def _parse_channels(channels_str: str) -> list[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        channels = [ch.strip() for ch in channels_str.split(",") if ch.strip()]
        if not channels:
            logger.error("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ CHANNELS –ø—É—Å—Ç")
            sys.exit(1)
        return channels


class CommentMonitor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    
    def __init__(self, config: Config):
        self.config = config
        self.client = TelegramClient(
            StringSession(config.string_session),
            config.api_id,
            config.api_hash
        )
        # –ú–∞–ø–ø–∏–Ω–≥: linked_chat_id -> (channel_username, channel_title)
        self.linked_groups: Dict[int, Tuple[Optional[str], str]] = {}
        # –°–ø–∏—Å–æ–∫ entity –æ–±—ä–µ–∫—Ç–æ–≤ –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        self.group_entities = []
        self.http_session: Optional[aiohttp.ClientSession] = None
        
        try:
            self.tz = pytz.timezone(config.timezone)
        except pytz.UnknownTimeZoneError:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è timezone {config.timezone}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UTC")
            self.tz = pytz.UTC
    
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞: —Ä–µ–∑–æ–ª–≤ –∫–∞–Ω–∞–ª–æ–≤, join, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è"""
        logger.info("–ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        await self.client.start()
        logger.info("Telegram –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é –¥–ª—è Bot API
        self.http_session = aiohttp.ClientSession()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
        for channel_username in self.config.channels:
            await self._setup_channel(channel_username)
        
        if not self.linked_groups:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–π –¥–∏—Å–∫—É—Å—Å–∏–æ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ")
            sys.exit(1)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –≤ linked-–≥—Ä—É–ø–ø–∞—Ö –∏—Å–ø–æ–ª—å–∑—É—è entity –æ–±—ä–µ–∫—Ç—ã
        @self.client.on(events.NewMessage(chats=self.group_entities))
        async def handle_comment(event):
            await self._handle_new_message(event)
        
        logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {len(self.linked_groups)} –¥–∏—Å–∫—É—Å—Å–∏–æ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
    
    async def _setup_channel(self, channel_username: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: —Ä–µ–∑–æ–ª–≤, join, –ø–æ–ª—É—á–µ–Ω–∏–µ linked –≥—Ä—É–ø–ø—ã"""
        try:
            # –†–µ–∑–æ–ª–≤ –∫–∞–Ω–∞–ª–∞
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞: {channel_username}")
            entity = await self.client.get_entity(channel_username)
            
            if not isinstance(entity, Channel):
                logger.warning(f"{channel_username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª
            try:
                await self.client(JoinChannelRequest(entity))
                logger.info(f"–í—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–∞–Ω–∞–ª {channel_username}")
            except UserAlreadyParticipantError:
                logger.info(f"–£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª {channel_username}")
            except (ChannelPrivateError, InviteHashExpiredError):
                logger.warning(f"–ö–∞–Ω–∞–ª {channel_username} –ø—Ä–∏–≤–∞—Ç–Ω—ã–π/–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª {channel_username}: {e}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            full_channel = await self.client(GetFullChannelRequest(entity))
            linked_chat_id = full_channel.full_chat.linked_chat_id
            
            if not linked_chat_id:
                logger.info(f"–ö–∞–Ω–∞–ª {channel_username} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ linked –≥—Ä—É–ø–ø–µ
            linked_entity = await self.client.get_entity(linked_chat_id)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
            try:
                await self.client(JoinChannelRequest(linked_entity))
                logger.info(f"–í—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ {channel_username}")
            except UserAlreadyParticipantError:
                logger.info(f"–£–∂–µ —Å–æ—Å—Ç–æ–∏–º –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ {channel_username}")
            except (ChannelPrivateError, InviteHashExpiredError):
                logger.warning(
                    f"–ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ {channel_username} –ø—Ä–∏–≤–∞—Ç–Ω–∞—è/–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
                )
                return
            except Exception as e:
                logger.warning(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π {channel_username}: {e}"
                )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ID –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø
            if linked_chat_id > 0:
                linked_chat_id = -int(f"100{linked_chat_id}")
                logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω ID –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã: {linked_chat_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∏ entity –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
            channel_title = entity.title
            channel_user = entity.username
            self.linked_groups[linked_chat_id] = (channel_user, channel_title)
            self.group_entities.append(linked_entity)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω entity –≥—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            
            logger.info(
                f"‚úì –ö–∞–Ω–∞–ª {channel_username} –Ω–∞—Å—Ç—Ä–æ–µ–Ω. "
                f"–ì—Ä—É–ø–ø–∞: {linked_chat_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {channel_title}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}")
    
    async def _handle_new_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏—Å–∫—É—Å—Å–∏–æ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö"""
        message = event.message
        
        # DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï —Å–æ–±—ã—Ç–∏—è
        logger.info(f"üîî –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: chat_id={event.chat_id}, message_id={message.id}")
        logger.info(f"   –¢–µ–∫—Å—Ç: {message.text[:50] if message.text else '(–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞)'}...")
        logger.info(f"   reply_to: {message.reply_to}")
        if message.reply_to:
            logger.info(f"   reply_to_top_id: {message.reply_to.reply_to_top_id}")
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç–∞–º
        if not message.reply_to or not message.reply_to.reply_to_top_id:
            logger.info("   ‚ùå –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: –Ω–µ—Ç reply_to_top_id")
            return
        
        post_id = message.reply_to.reply_to_top_id
        chat_id = event.chat_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
        channel_info = self.linked_groups.get(chat_id)
        if not channel_info:
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã {chat_id}")
            return
        
        channel_username, channel_title = channel_info
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
        sender = await event.get_sender()
        author_first = sender.first_name or ""
        author_last = sender.last_name or ""
        author_name = f"{author_first} {author_last}".strip() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        author_username = f"@{sender.username}" if sender.username else ""
        author_id = sender.id
        
        # –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        comment_text = message.text or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"
        
        # –í—Ä–µ–º—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        msg_time = message.date
        local_time = msg_time.astimezone(self.tz)
        time_str = local_time.strftime("%H:%M %d.%m.%Y")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
        if channel_username:
            post_link = f"https://t.me/{channel_username}/{post_id}"
        else:
            post_link = str(post_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = (
            f"–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ <b>{channel_title}</b>\n"
            f"–ü–æ—Å—Ç: {post_link}\n"
            f"–ê–≤—Ç–æ—Ä: {author_name} {author_username} (tg://user?id={author_id})\n"
            f"–í—Ä–µ–º—è: {time_str}\n\n"
            f"{comment_text}"
        )
        
        logger.info(
            f"–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {author_name} –≤ {channel_title} –∫ –ø–æ—Å—Ç—É {post_id}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Bot API
        await self._send_notification(notification)
    
    async def _send_notification(self, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Bot API —Å —Ä–µ—Ç—Ä–∞—è–º–∏"""
        url = f"https://api.telegram.org/bot{self.config.bot_token}/sendMessage"
        payload = {
            "chat_id": self.config.alert_chat_id,
            "text": text,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        
        max_retries = 5
        for attempt in range(1, max_retries + 1):
            try:
                async with self.http_session.post(url, json=payload) as response:
                    if response.status == 200:
                        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        return
                    else:
                        error_text = await response.text()
                        logger.warning(
                            f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}: "
                            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (status {response.status}): {error_text}"
                        )
            except Exception as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            if attempt < max_retries:
                delay = 2 ** (attempt - 1)  # 1s, 2s, 4s, 8s, 16s
                logger.info(f"–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(delay)
        
        logger.error(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫"
        )
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            await self.setup()
            await self.client.run_until_disconnected()
        finally:
            if self.http_session:
                await self.http_session.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("=" * 50)
    logger.info("Telegram Comment Monitor v1.0")
    logger.info("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = Config()
    logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
    logger.info(f"  - Timezone: {config.timezone}")
    logger.info(f"  - –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(config.channels)}")
    logger.info(f"  - –ö–∞–Ω–∞–ª—ã: {', '.join(config.channels)}")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    monitor = CommentMonitor(config)
    await monitor.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)

